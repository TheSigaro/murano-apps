#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: com.mirantis.applications.percona
  apps: io.murano.applications
  conf: io.murano.configuration
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system
  m: io.murano.metadata.engine
  db: com.example.databases

Name: XtraDBCluster

Extends:
  - apps:MultiServerApplicationWithScaling
  - db:SqlDatabase
  - apps:OpenStackSecurityConfigurable

Properties:
  rootPassword:
    Contract: $.string()

  ipAddresses:
    Usage: Out
    Contract: $.string()

  bootstrapNode:
    Usage: Out
    Contract: $.class(res:Instance)

Methods:
  getSecurityRules:
    Body:
      - Return:
        - ToPort: 3306
          FromPort: 3306
          IpProtocol: tcp
          External: true
        - ToPort: 4444
          FromPort: 4444
          IpProtocol: tcp
          External: false
        - ToPort: 4568
          FromPort: 4567
          IpProtocol: tcp
          External: false

  onBeforeInstall:
    Arguments:
      - servers:
          Contract:
            - $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
    Body:
      - $this._public_ips: $serverGroup.getServers().select(
          switch(
            $.assignFloatingIp => $.floatingIpAddress,
            true => $.ipAddresses.first()
          ))
      - $this._private_ips:  $serverGroup.getServers().select($.ipAddresses.first())

  onInstallServer:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
    Body:
      - $file: sys:Resources.string('install.sh')
      - conf:Linux.runCommand($server.agent, $file)

  onPreConfigure:
    Arguments:
      - servers:
          Contract:
            - $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
    Body:
      - $this._public_ips: $serverGroup.getServers().select(
          switch(
            $.assignFloatingIp => $.floatingIpAddress,
            true => $.ipAddresses.first()
          ))
      - $this._private_ips:  $serverGroup.getServers().select($.ipAddresses.first())
      - If: not $this.bootstrapNode
        Then:
          - $sstPassword: randomName()
          - $this.setAttr('sst_password', $sstPassword)
          - $this.bootstrapCluster($serverGroup.getServers().first())

  bootstrapCluster:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
    Body:
      - $this.report('Bootstrapping the Cluster')
      - $this.putConfig($server)
      - conf:Linux.runCommand($server.agent, '/etc/init.d/mysql bootstrap-pxc')
      - $sstUserScript: sys:Resources.string('addSstUser.sh').replace({"%SST_PASSWORD%" => $this.getAttr('sst_password')})
      - conf:Linux.runCommand($server.agent, $sstUserScript)
      - $this.report('Successfully bootstrapped the Cluster')
      - $this.bootstrapNode: $server

  onConfigureServer:
    Meta:
      - m:Synchronize:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
    Body:
      - $this.putConfig($server)
      - conf:Linux.runCommand($server.agent, '/etc/init.d/mysql start')

  onCompleteConfiguration:
    Arguments:
      - servers:
          Contract:
            - $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
      - failedServers:
          Contract:
            - $.class(res:Instance).notNull()
    Body:
      - If: $this.rootPassword
        Then:
          - $this.changeRootPassword($serverGroup.getServers().first())


      - $this.find(std:Environment).require().reporter.report(
          $this, format('MySQL is available at {0}', $this._public_ips.join(', ')))

  getKey:
    Body:
      - Return:
          instances: $this.servers.getServers().select(id($)).orderBy($)
          password: $this.rootPassword


  changeRootPassword:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
    Body:
      - $comm: sys:Resources.string('changeRoot.sh').replace({'%PASSWORD%' => $this.rootPassword})
      - conf:Linux.runCommand($server.agent, $comm)

  putConfig:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
    Body:
      - $sstPassword: $this.getAttr('sst_password')
      - $configReplacements:
          "%ALL_IP_ADDRESSES%": $this._private_ips.join(',')
          "%NODE_IP_ADDRESS%": $server.ipAddresses.first()
          "%CLUSTER_NAME%": name($this)
          "%SST_PASSWORD%": $sstPassword
      - $config: sys:Resources.string('my.cnf').replace($configReplacements)
      - conf:Linux.putFile($server.agent, $config, '/etc/mysql/my.cnf')

  createDatabase:
    Arguments:
      - database:
          Contract: $.string().notNull()
    Body:
      - $this.deploy()
      - $this.report(format('Creating {0} database.', $database))

      # Creating Database on MySQL
      - $replacement:
          "%DATABASE%": $database
      - $file: sys:Resources.string('createMySqlDatabase.sh').replace($replacement)
      - conf:Linux.runCommand($this.servers.getServers().first().agent, $file)
      - $this.report(format('Database {0} created', $database))

  createUser:
    Arguments:
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
    Body:
      - $this.deploy()
      - $this.report(format('Creating {0} user', $username))

      # Creating user on MySQL
      - $replacements:
          "%USER_NAME%": $username
          "%PASSWORD%": $password
      - $file: sys:Resources.string('createMySqlUser.sh').replace($replacements)
      - conf:Linux.runCommand($this.servers.getServers().first().agent, $file)
      - $this.report(format('User {0} created', $username))

  assignUser:
    Arguments:
      - username:
          Contract: $.string().notNull()
      - database:
          Contract: $.string().notNull()
    Body:
      - $this.deploy()
      - $this.report(format('Assigning user {0} to database {1}', $username, $database))

      # Assigning user to MySQL database
      - $replacements:
          "%USER_NAME%": $username
          "%DB_NAME%": $database
      - $file: sys:Resources.string('assignMySqlUser.sh').replace($replacements)
      - conf:Linux.runCommand($this.servers.getServers().first().agent, $file)

      - $this.report(format('User {0} assigned to database {1}', $username, $database))

  getConnectionString:
    Arguments:
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
    Body:
      - If: $this.servers.getServers().where($.assignFloatingIp).any()
        Then:
          - $host: $this.servers.getServers().where($.assignFloatingIp).floatingIpAddress.first()
        Else:
          - $host: $this.servers.getServers().first().ipAddresses.first()
      - Return: format('mysql://{0}@{1}:{2}', $username, $password, $host)
