#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: com.mirantis
  std: io.murano
  res: io.murano.resources
  netsfc: org.openstack.networkingSfc
  sys: io.murano.system
  conf: io.murano.configuration

Name: PaloAltoApp

Extends: std:Application

Properties:
  paloalto:
    Contract: $.class(PaloAltoNode)
  loadbalancer:
    Contract: $.class(PaloAltoNode)
  backendNodes:
    Contract: [$.class(PaloAltoNode)]
  network:
    Contract: $.class(res:Network).notNull()
  keyname:
    Contract: $.string()
  flavor:
    Contract: $.string().notNull()
  paImage:
    Contract: $.string().notNull()
  image:
    Contract: $.string().notNull()
  portPairGroup:
    Contract: $.class(netsfc:PortPairGroup)
    Usage: InOut
  flowClassifier:
    Contract: $.class(netsfc:FlowClassifier)
    Usage: InOut
  portChain:
    Contract: $.class(netsfc:PortChain)
    Usage: InOut

Methods:
  .init:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._log: $._environment.reporter
          - $._log.report($this, 'Deploying SFC network...')
          - $.network.deploy()

          # preparing Firewall
          - $.paloalto.spawnInstance(name => 'paloalto-fw-instance',
              network => $.network, flavor => $.flavor,
              image => $.paImage, portNum => 2)

          # port pair & port pair group
          - $._log.report($this, 'Deploying port pair...')
          - $portPair: new(
              netsfc:PortPair, $this, ingress => $.paloalto.ports[1],
              egress => $.paloalto.ports[1], name => 'paloalto')
          - $portPair.deploy()
          - $.portPairGroup: new(
              netsfc:PortPairGroup, $this, portPairs => [$portPair], name => 'paloalto')
          - $.portPairGroup.deploy()

          # preparing loadbalancer
          - $.loadbalancer.spawnInstance(name => 'paloalto-loadbalancer',
              network => $.network, flavor => $.flavor,
              image => $.image)

          # backends
          - $net: $.network
          - $.backendNodes.pselect($.spawnInstance(flavor => $.flavor,
              image => $.image, network => $net, name => $.name))

          # deploying and configuring software
          - $._log.report($this, 'Deploying software on backend server...')
          - $.loadbalancer.deploySoftware('loadbalancer')
          - $.backendNodes.pselect($.deploySoftware('backend'))

          - $bips: $.backendNodes.select($.getInternalIp())
          - $backendIps: format('{0}', ':'.join($bips))
          - $._log.report($this, format( "backend ips => {0}", $backendIps))
          - $.loadbalancer.configureSoftware('loadbalancer', $backendIps)
          - $.backendNodes.pselect($.configureSoftware('backend', $backendIps))

          - $._log.report($this, 'Deploying flow classifier...')
          - $.flowClassifier: new(
              netsfc:FlowClassifier, $this, protocol => 'TCP', name => 'paloalto',
              destinationIpPrefix => format("{0}/32",$.loadbalancer.getInternalIp()),
              destinationPortMin => 80, destinationPortMax => 80)
          - $.flowClassifier.deploy()
          - $._log.report($this, 'Deploying port chain...')
          - $.portChain: new(
              netsfc:PortChain, $this,
              name => 'paloalto',
              portPairGroups => [$.portPairGroup],
              flowClassifiers => [$.flowClassifier])
          - $.portChain.deploy()

          # Workaround: due to current PA config drive support implementation
          # it is required that user will distribute config manually
          - $replacements:
              "%ZONEIP%": $.paloalto.getSecondIp()
          - $config: sys:Resources.string('pa-configuration.xml').replace($replacements)
          - conf:Linux.putFile($.loadbalancer.agent, $config, '/home/ubuntu/pa-config.xml')

          # Workaround: unusual number of sleeps is due to LP #1611019 - then this gets
          # resolved, need to remove it.
          - $lbip: $.loadbalancer.getInternalIp()
          - $._log.report($this, 'Due to current PA config import implementation you need to do the following manually')
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, format('1. Assign floating IP to PA machine to {0} IP', $lbip))
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, '2. Login via SSH to this host using ssh admin@floating_ip')
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, format('scp import configuration from ubuntu\@{0}:pa-config.xml \#password is ubuntu', $lbip))
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, 'configure')
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, 'load config from pa-config.xml')
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, 'commit')
          - conf:Linux.runCommand($.loadbalancer.agent, 'sleep 1')
          - $._log.report($this, 'Deployment finished. Please see the deployment logs')

          - $.setAttr(deployed, true)
